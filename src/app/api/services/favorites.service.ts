/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiFavoritesCustomerIdGet$Json } from '../fn/favorites/api-favorites-customer-id-get-json';
import { ApiFavoritesCustomerIdGet$Json$Params } from '../fn/favorites/api-favorites-customer-id-get-json';
import { apiFavoritesCustomerIdGet$Plain } from '../fn/favorites/api-favorites-customer-id-get-plain';
import { ApiFavoritesCustomerIdGet$Plain$Params } from '../fn/favorites/api-favorites-customer-id-get-plain';
import { apiFavoritesDelete$Json } from '../fn/favorites/api-favorites-delete-json';
import { ApiFavoritesDelete$Json$Params } from '../fn/favorites/api-favorites-delete-json';
import { apiFavoritesDelete$Plain } from '../fn/favorites/api-favorites-delete-plain';
import { ApiFavoritesDelete$Plain$Params } from '../fn/favorites/api-favorites-delete-plain';
import { apiFavoritesPost$Json } from '../fn/favorites/api-favorites-post-json';
import { ApiFavoritesPost$Json$Params } from '../fn/favorites/api-favorites-post-json';
import { apiFavoritesPost$Plain } from '../fn/favorites/api-favorites-post-plain';
import { ApiFavoritesPost$Plain$Params } from '../fn/favorites/api-favorites-post-plain';
import { FavoriteProductResponseListResultCustomModel } from '../models/favorite-product-response-list-result-custom-model';
import { StringResultCustomModel } from '../models/string-result-custom-model';

@Injectable({ providedIn: 'root' })
export class FavoritesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiFavoritesCustomerIdGet()` */
  static readonly ApiFavoritesCustomerIdGetPath = '/api/Favorites/{customerId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoritesCustomerIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoritesCustomerIdGet$Plain$Response(params: ApiFavoritesCustomerIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteProductResponseListResultCustomModel>> {
    return apiFavoritesCustomerIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoritesCustomerIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoritesCustomerIdGet$Plain(params: ApiFavoritesCustomerIdGet$Plain$Params, context?: HttpContext): Observable<FavoriteProductResponseListResultCustomModel> {
    return this.apiFavoritesCustomerIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteProductResponseListResultCustomModel>): FavoriteProductResponseListResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoritesCustomerIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoritesCustomerIdGet$Json$Response(params: ApiFavoritesCustomerIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<FavoriteProductResponseListResultCustomModel>> {
    return apiFavoritesCustomerIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoritesCustomerIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiFavoritesCustomerIdGet$Json(params: ApiFavoritesCustomerIdGet$Json$Params, context?: HttpContext): Observable<FavoriteProductResponseListResultCustomModel> {
    return this.apiFavoritesCustomerIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<FavoriteProductResponseListResultCustomModel>): FavoriteProductResponseListResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiFavoritesPost()` */
  static readonly ApiFavoritesPostPath = '/api/Favorites';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoritesPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritesPost$Plain$Response(params?: ApiFavoritesPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiFavoritesPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoritesPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritesPost$Plain(params?: ApiFavoritesPost$Plain$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiFavoritesPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoritesPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritesPost$Json$Response(params?: ApiFavoritesPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiFavoritesPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoritesPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritesPost$Json(params?: ApiFavoritesPost$Json$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiFavoritesPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

  /** Path part for operation `apiFavoritesDelete()` */
  static readonly ApiFavoritesDeletePath = '/api/Favorites';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoritesDelete$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritesDelete$Plain$Response(params?: ApiFavoritesDelete$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiFavoritesDelete$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoritesDelete$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritesDelete$Plain(params?: ApiFavoritesDelete$Plain$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiFavoritesDelete$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiFavoritesDelete$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritesDelete$Json$Response(params?: ApiFavoritesDelete$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<StringResultCustomModel>> {
    return apiFavoritesDelete$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiFavoritesDelete$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiFavoritesDelete$Json(params?: ApiFavoritesDelete$Json$Params, context?: HttpContext): Observable<StringResultCustomModel> {
    return this.apiFavoritesDelete$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<StringResultCustomModel>): StringResultCustomModel => r.body)
    );
  }

}
